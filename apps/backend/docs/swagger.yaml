basePath: /api
definitions:
  entity.FoodItem:
    properties:
      barcode_upc:
        type: string
      brand_name:
        type: string
      calcium_mg_per_default_serving:
        type: number
      calories_per_default_serving:
        type: number
      carbs_grams_per_default_serving:
        type: number
      cholesterol_mg_per_default_serving:
        type: number
      created_at:
        type: string
      created_by_user_id:
        type: string
      fat_grams_per_default_serving:
        type: number
      fiber_grams_per_default_serving:
        type: number
      id:
        type: string
      iron_mg_per_default_serving:
        type: number
      is_verified:
        type: boolean
      name:
        type: string
      potassium_mg_per_default_serving:
        type: number
      protein_grams_per_default_serving:
        type: number
      saturated_fat_grams_per_default_serving:
        type: number
      serving_size_default_qty:
        type: number
      serving_size_default_unit:
        type: string
      sodium_mg_per_default_serving:
        type: number
      source:
        $ref: '#/definitions/entity.FoodItemSource'
      sugar_grams_per_default_serving:
        type: number
      trans_fat_grams_per_default_serving:
        type: number
      updated_at:
        type: string
      vitamin_a_mcg_per_default_serving:
        type: number
      vitamin_c_mg_per_default_serving:
        type: number
    type: object
  entity.FoodItemSource:
    enum:
    - user_created
    - system
    - api
    type: string
    x-enum-varnames:
    - FoodItemSourceUserCreated
    - FoodItemSourceSystem
    - FoodItemSourceAPI
  entity.User:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        $ref: '#/definitions/entity.UserGender'
      id:
        type: string
      is_active:
        type: boolean
      is_email_verified:
        type: boolean
      last_login_at:
        type: string
      last_name:
        type: string
      profile_picture_url:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  entity.UserGender:
    enum:
    - Male
    - Female
    type: string
    x-enum-varnames:
    - UserGenderMale
    - UserGenderFemale
  v1.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  v1.PaginatedResponse:
    properties:
      data: {}
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Fitness application API for tracking nutrition, meals, and products
  title: Rebound API
  version: "1.0"
paths:
  /api/v1/users:
    get:
      description: Get a paginated list of users
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Update a user
      tags:
      - users
  /api/v1/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: New password
        in: body
        name: password
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Update user password
      tags:
      - users
  /api/v1/users/{id}/verify-email:
    put:
      consumes:
      - application/json
      description: Update a user's email verification status
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Verification status
        in: body
        name: verified
        required: true
        schema:
          additionalProperties:
            type: boolean
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Update email verification status
      tags:
      - users
  /food-items:
    get:
      description: Get a paginated list of food items
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.FoodItem'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List food items
      tags:
      - food-items
    post:
      consumes:
      - application/json
      description: Create a new food item with the provided details
      parameters:
      - description: Food item details
        in: body
        name: foodItem
        required: true
        schema:
          $ref: '#/definitions/entity.FoodItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.FoodItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new food item
      tags:
      - food-items
  /food-items/{id}:
    delete:
      description: Delete a food item by its ID
      parameters:
      - description: Food item ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Delete a food item
      tags:
      - food-items
    get:
      description: Get a food item by its ID
      parameters:
      - description: Food item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FoodItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get a food item by ID
      tags:
      - food-items
    put:
      consumes:
      - application/json
      description: Update an existing food item
      parameters:
      - description: Food item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated food item details
        in: body
        name: foodItem
        required: true
        schema:
          $ref: '#/definitions/entity.FoodItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FoodItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Update a food item
      tags:
      - food-items
  /food-items/search:
    get:
      description: Search food items by name or brand
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.FoodItem'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Search food items
      tags:
      - food-items
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
